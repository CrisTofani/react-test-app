// Types have been autogenerated starting from the received schema using https://www.graphql-code-generator.com/
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  UUID: any;
};

export type RootQueryType = {
  __typename?: "RootQueryType";
  share?: Maybe<Share>;
};

export type RootQueryTypeShareArgs = {
  id?: InputMaybe<Scalars["UUID"]>;
};

export type Share = {
  __typename?: "Share";
  identifier: Scalars["UUID"];
  version?: Maybe<Version>;
};

export type Version = {
  __typename?: "Version";
  document?: Maybe<Document>;
};

export type Document = {
  __typename?: "Document";
  artboards?: Maybe<Artboards>;
  name: Scalars["String"];
};

export type Artboards = {
  __typename?: "Artboards";
  entries: Array<Artboard>;
};

export type Artboard = {
  __typename?: "Artboard";
  files: Array<File>;
  identifier: Scalars["UUID"];
  name: Scalars["String"];
};

export type File = {
  __typename?: "File";
  url?: Maybe<Scalars["String"]>;
  height?: Maybe<Scalars["Int"]>;
  width?: Maybe<Scalars["Int"]>;
  scale: Scalars["Int"];
  thumbnails?: Maybe<Array<Maybe<Thumbnail>>>;
};

export type Thumbnail = {
  __typename?: "Thumbnail";
  type?: Maybe<ThumbnailSizeType>;
  url?: Maybe<Scalars["String"]>;
};

export enum ThumbnailSizeType {
  S = "S",
  M = "M",
  L = "L",
  Xl = "XL"
}
